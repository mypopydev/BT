1. bthci_acl.src.bd_addr == 8c:de:52:fb:c8:ce ||  bthci_acl.dst.bd_addr == 8c:de:52:fb:c8:ce

2. SPP Protrol

3. RFCOMM
   DLCI: Data Link Connect Identifier

   Frame Type:
   SABM
   UA
   DM
   DISC
   UIH

4. SDP
   - SDP只是提供侦测service以及特性的方法，但不提供如何使用这些service的方法
   - SDP提供了一种用于发现服务及这些可用服务属性的方法，但它不提供利用这些服务的机制。
   - SDP中的每一个Service用Service Record来表示（具有唯一的32bit的Handle)，
     每一个Service Record由若干Service Attribute组成，Service Attribute由Attribute ID和Attribute Valuel两个部分。
   

其架构是Client-Server模式

5. L2CAP
   PSM: Protocol and Service Multiplexers (PSMs)
   Protocol 	     	PSM 	Reference
   SDP 			0x0001 	See Bluetooth Service Discovery Protocol (SDP), Bluetooth SIG
   RFCOMM 		0x0003 	See RFCOMM with TS 07.10, Bluetooth SIG
   TCS-BIN 		0x0005 	See Bluetooth Telephony Control Specification / TCS Binary, Bluetooth SIG
   TCS-BIN-CORDLESS 	0x0007 	See Bluetooth Telephony Control Specification / TCS Binary, Bluetooth SIG
   BNEP 		0x000F 	See Bluetooth Network Encapsulation Protocol, Bluetooth SIG
   HID_Control 		0x0011 	See Human Interface Device, Bluetooth SIG
   HID_Interrupt 	0x0013 	See Human Interface Device, Bluetooth SIG
   UPnP 		0x0015 	See [ESDP] , Bluetooth SIG
   AVCTP 		0x0017 	See Audio/Video Control Transport Protocol, Bluetooth SIG
   AVDTP 		0x0019 	See Audio/Video Distribution Transport Protocol, Bluetooth SIG
   AVCTP_Browsing 	0x001B 	See Audio/Video Remote Control Profile, Bluetooth SIG
   UDI_C-Plane 		0x001D 	See the Unrestricted Digital Information Profile [UDI], Bluetooth SIG
   ATT 			0x001F 	See Bluetooth Core Specification.​​
   ​3DSP 		0x0021​  See 3D Synchronization Profile, Bluetooth SIG.
​   LE_PSM_IPSP 	​0x0023  ​See Internet Protocol Support Profile (IPSP), Bluetooth SIG
   OTS  		0x0025 	See Object Transfer Service (OTS), Bluetooth SIG 

   
6. adb

   a). adb devices
   b). adb shell
   c). adb pull /sdcard/Android/data/btsnoop_hci.log


7. Tools
   a). hcitool scan
barry@barry-desktop:~/Sources$ sudo hcitool scan
[sudo] password for barry: 
Scanning ...
	8C:DE:52:FB:C8:CE	RBP1601040168
	18:3A:2D:2C:09:50	Popy Note4

   b). sdptool records 8C:DE:52:FB:C8:CE
barry@barry-desktop:~/Sources$ sudo sdptool records 8C:DE:52:FB:C8:CE
Service RecHandle: 0x10001
Service Class ID List:
  "PnP Information" (0x1200)
Protocol Descriptor List:
  "L2CAP" (0x0100)
    PSM: 1
  "SDP" (0x0001)
Language Base Attr List:
  code_ISO639: 0x656e
  encoding:    0x6a
  base_offset: 0x100
Profile Descriptor List:
  "PnP Information" (0x1200)
    Version: 0x0100

Service Name: SerialPort
Service RecHandle: 0x10007
Service Class ID List:
  "Serial Port" (0x1101)
Protocol Descriptor List:
  "L2CAP" (0x0100)
  "RFCOMM" (0x0003)
    Channel: 6   // Find the Channel 6
Language Base Attr List:
  code_ISO639: 0x656e
  encoding:    0x6a
  base_offset: 0x100
Profile Descriptor List:
  "Serial Port" (0x1101)
    Version: 0x0100

Service Name: Wireless iAP
Service RecHandle: 0x1000f
Service Class ID List:
  UUID 128: 00000000-deca-fade-deca-deafdecacaff
Protocol Descriptor List:
  "L2CAP" (0x0100)
  "RFCOMM" (0x0003)
    Channel: 3
Language Base Attr List:
  code_ISO639: 0x656e
  encoding:    0x6a
  base_offset: 0x100

   c). sudo rfcomm bind /dev/rfcomm0 8C:DE:52:FB:C8:CE 6

https://github.com/denisigo/android-linux-bluetooth/blob/master/BluetoothClient.py

http://www.denisigo.com/2014/08/example-of-bluetooth-communication-between-android-and-linux/
  
  8. SPP Client

a). Discovering our service

We will use Python and PySerial library to deal with serial ports. We 
will use hcitool to discover Bluetooth devices, and sdptool to discover 
some device’s services. We will also use rfcomm tool to bind particular 
device’s RFCOMM channel to the virtual serial port. I hope you’re able 
to install these tools by yourself. So, enable Bluetooth on your device 
and enable device visibility for discovering. Now, let’s discover devices 
from desktop using hsitool:

$ hcitool scan

Scanning ...
  98:DD:D0:EA:62:4E Lenovo A369i

Great, we have discovered our device and it has following MAC: 98:DD:D0:EA:62:4E. 
Now, start our Android application and let’s discover Bluetooth services 
of our device using its MAC:

$ sdptool records 98:DD:D0:EA:62:4E

....

Service Name: TestService
Service RecHandle: 0x10013
Service Class ID List:
  UUID 128: 00001101-0000-1000-8000-00805f9b34fb
Protocol Descriptor List:
  "L2CAP" (0x0100)
  "RFCOMM" (0x0003)
    Channel: 21

Great, we have discovered our SPP service, take a look at Protocol Descriptor 
List - that’s protocols our service is using, and there is RFCOMM one on 
channel 21. So, it’s time to create our virtual serial port:

$ sudo rfcomm bind /dev/rfcomm0 98:DD:D0:EA:62:4E 21

Where /dev/rfcomm0 is the name of our virtual serial port device, 
then go MAC address and port number. Now, it’s time to create our Python client!

b). Python client

- Create and open serial port:

port = serial.Serial(port='/dev/rfcomm0', baudrate=921600, timeout=1)
port.open()

- Create and start reading thread:

def readThread(port):
  while True:
    # Read some bytes available from port
    bytes = port.read(1024)
    # Decode them as a string
    message = bytes.decode("utf-8")
    if message:
      print message

thread.start_new_thread( readThread, ( port, ) )

- And then take all from input and write to the port:

while True:
  inp = raw_input('>')
  if len(inp):
    port.write(inp)

See full client source here. The end.

                                               Sys  Dia  Pulse
AA96020F 0106000E 01010101 0100A600 75004F99   22.1 15.6 79
AA96020F 0106000E 01010101 0100A700 82005474   22.2 17.3 84
AA96020F 0106000E 01010101 0100A300 72005084   21.7 15.2 80
AA96020F 0106000E 01010101 0100AD00 9100566F   23.0 19.3 86
AA960203 01070205                              ERROR

Pulse        Sys                          Dia
4F => 79     A6(166) => x 4 / 30  = 22.1  75(117) => x 2 / 15 = 15.6
54 => 84     A7(167) => x 4 / 30  = 22.2  82(130) => x 2 / 15 = 17.3
50 => 80     A3(163) => x 4 / 30  = 21.7  72(114) => x 2 / 15 = 15.2
56 => 86     AD(173) => x 4 / 30  = 23.0  91(145) => x 2 / 15 = 19.3

9. bluetoothctl

https://wiki.gentoo.org/wiki/Bluetooth

Start bluetoothctl:
user $bluetoothctl

List the available controllers:
[bluetooth]#list

Display information about a controller:
[bluetooth]#show controller_mac_address

Set the default controller:
[bluetooth]#select controller_mac_address

Power on the controller:
[bluetooth]#power on

Enable the agent and set it as default:
[bluetooth]#agent on
[bluetooth]#default-agent

Set the controller as discoverable (temporarily for 3 minutes) and pairable:
[bluetooth]#discoverable on
[bluetooth]#pairable on

Scan for devices:
[bluetooth]#scan on

Put the device into pairing mode. This generally involves pressing a button or a combinations of buttons, usually for several seconds.

Discover the device MAC address:
[bluetooth]#devices

Pair with the device:
[bluetooth]#pair device_mac_address

Enter the PIN if prompted:
[agent]PIN code: ####

Allow the service authorization if requested:
[agent]Authorize service service_uuid (yes/no): yes

Trust the device:
[bluetooth]#trust device_mac_address

Connect to the device:
[bluetooth]#connect device_mac_address

Display information about the device:
[bluetooth]#info device_mac_address

The device is now paired:
[bluetooth]#quit
